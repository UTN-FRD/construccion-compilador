use std::str::FromStr;
use ast::{Expr, Atom};

grammar;

pub Program: Vec<Expr> = {
    Expr*
}

// If I ever move define calls into the syntactic anaylser
// these are the rules we should follow
// https://docs.racket-lang.org/guide/syntax-overview.html#%28part._local-binding-intro%29
//
// For now we are using a much simpler form
// TODO eventually we will want to dicover syntactically the following constructs
// (define (myFn ...args) body)
// (define varName varValue)
// (let ([varName varValue]+) expr)
// And probably more
//
// This will make the semantic side of the code (the eval)
// much more easy and simpler
pub Expr: Expr = {
    "(" "define" "(" <fn_name: Id> <arg_names: Id*> ")" <body: Expr+> ")" => {
        Expr::DefineFunction(fn_name, arg_names, body)
    },

    "(" "define" <var_name: Id> <var_value: Expr> ")" => {
        Expr::DefineVariable(var_name, Box::new(var_value))
    },

    "(" <l:List> ")" => Expr::List(l),
    <a:Atom> => Expr::Atom(a),
};

pub List: Vec<Expr> = {
    Expr*
}

pub Atom: Atom = {
    <s:Op> => Atom::Id(s),
    //TODO strings!
    //TODO commas
    <s:Number> => Atom::Num(s),
    <s:Id> => Atom::Id(s),
}

Op: String = <s:r"[+\-*/=]"> => s.to_string();
Id: String = <s:r"[[:alpha:]][\d\w\-_]*\??"> => s.to_string();
Number: f64 =  <s:r"[0-9]+"> => f64::from_str(s).unwrap();
