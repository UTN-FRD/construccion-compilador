use std::str::FromStr;
use ast::{Expr, Atom};

grammar;

pub Program: Vec<Expr> = {
    Expr*
}

// If I ever move define calls into the syntactic anaylser
// these are the rules we should follow
// https://docs.racket-lang.org/guide/syntax-overview.html#%28part._local-binding-intro%29
//
// For now we are using a much simpler form
// TODO eventually we will want to dicover syntactically the following constructs
// (define (myFn ...args) body)
// (define varName varValue)
// (let ([varName varValue]+) expr)
// And probably more
//
// This will make the semantic side of the code (the eval)
// much more easy and simpler
pub Expr: Expr = {
    "(" <l:List> ")" => Expr::List(l),
    <a:Atom> => Expr::Atom(a),
};

pub List: Vec<Expr> = {
    Expr*
}

pub Atom: Atom = {
    "+" => Atom::Id("+".to_string()),
    "-" => Atom::Id("-".to_string()),
    <s:r"[A-Za-z]([0-9A-Za-z])*"> => Atom::Id(s.to_string()),
    //TODO commas
    <s:r"[0-9]+"> => Atom::Num(f64::from_str(s).unwrap()),
    //TODO strings!
}
