use std::str::FromStr;
use crate::ast::Atom;
use crate::{ Token, Expr };
use lalrpop_util::ErrorRecovery;

grammar<'err, 'input>(errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, &'static str>>);


extern {
    enum Token<'input> {
        "=" => Token::Equal,
        ">" => Token::GreaterThan,
        "<" => Token::LessThan,
        "-" => Token::Minus,
        "+" => Token::Plus,
        "*" => Token::Times,
        "/" => Token::Div,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "define" => Token::Define,
        "if" => Token::If,
        "number literal" => Token::Num(<f64>),
        "string literal" => Token::String(<&'input str>),
        "identifier" => Token::Identifier(<&'input str>)
    }
}

pub Program: Vec<Expr> = {
    Expr*
}

// these are the rules we should follow
// https://docs.racket-lang.org/guide/syntax-overview.html#%28part._local-binding-intro%29
pub Expr: Expr = {
    "(" "define" "(" <fn_name: "identifier"> <arg_names: "identifier"*> ")" <body: Expr+> ")" => {
        Expr::DefineFunction(fn_name.to_string(), arg_names.iter().map(|s| s.to_string()).collect::<Vec<String>>(), body)
    },

    "(" "define" <var_name: "identifier"> <var_value: Expr> ")" => {
        Expr::DefineVariable(var_name.to_string(), Box::new(var_value))
    },

    "(" "if" <cond: Expr> <positive: Expr> <negative: Expr?> ")" => {
        Expr::If(Box::new(cond), Box::new(positive), Box::new(negative))
    },

    "(" <l:List> ")" => Expr::List(l),

    <a:Atom> => Expr::Atom(a)

    // ! => { errors.push(<>); println!("{:?}", <>)},

};

pub List: Vec<Expr> = {
    Expr*
}

pub Atom: Atom = {
    Operation,
    "string literal" => Atom::StringAtom(<>.to_string()),
    "number literal" => Atom::Number(<>),
    "identifier" => Atom::Id(<>.to_string()),
}

pub Operation: Atom = {
    "<" => Atom::Id("<".to_string()),
    ">" => Atom::Id(">".to_string()),
    "=" => Atom::Id("=".to_string()),
    "+" => Atom::Id("+".to_string()),
    "-" => Atom::Id("-".to_string()),
    "*" => Atom::Id("*".to_string()),
    "/" => Atom::Id("/".to_string()),
}
