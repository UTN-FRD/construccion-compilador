use std::str::FromStr;
use crate::ast::{Expr, Atom};
use crate::tok::Tok;
use lalrpop_util::ErrorRecovery;

grammar<'err, 'input>(errors: &'err mut Vec<ErrorRecovery<usize, Tok<'input>, &'static str>>);


extern {
    enum Tok<'input> {
        "-" => Tok::Minus,
        "+" => Tok::Plus,
        "(" => Tok::LParen,
        ")" => Tok::RParen,
        "define" => Tok::Define,
        "if" => Tok::If,
        "number literal" => Tok::Num(<f64>),
        "string literal" => Tok::String(<&'input str>),
        "identifier" => Tok::String(<&'input str>)
    }
}

pub Program: Vec<Expr> = {
    Expr*
}

// these are the rules we should follow
// https://docs.racket-lang.org/guide/syntax-overview.html#%28part._local-binding-intro%29
pub Expr: Expr = {
    "(" "define" "(" <fn_name: "identifier"> <arg_names: "identifier"*> ")" <body: Expr+> ")" => {
        Expr::DefineFunction(fn_name.to_string(), arg_names.iter().map(|s| s.to_string()).collect::<Vec<String>>(), body)
    },

    "(" "define" <var_name: "identifier"> <var_value: Expr> ")" => {
        Expr::DefineVariable(var_name.to_string(), Box::new(var_value))
    },

    "(" "if" <cond: Expr> <positive: Expr> <negative: Expr?> ")" => {
        Expr::If(Box::new(cond), Box::new(positive), Box::new(negative))
    },

    "(" <l:List> ")" => Expr::List(l),

    <a:Atom> => Expr::Atom(a)

    // ! => { errors.push(<>); println!("{:?}", <>)},

};

pub List: Vec<Expr> = {
    Expr*
}

pub Atom: Atom = {
    // <s:Op> => Atom::Id(s), //Id("+"), Id("-")
    "string literal" => Atom::StringAtom(<>.to_string()),
    "number literal" => Atom::Number(<>),
    "identifier" => Atom::Id(<>.to_string()),
}
// Op: String = < s : r"[+\-*/=><]"> => s.to_string();
// Id: String = <s:r"[[:alpha:]][\d\w\-_]*\??"> => s.to_string();
// Number: f64 =  <s:r"(\-)?[0-9]+(\.[0-9]+)?"> => f64::from_str(s).unwrap();
// StringLiteral: String = <s:r#""(?:[^"\\]|\\.)*""#> => s[1..(s.len() - 1)].to_string();
